use Mix.Config

secret_key_generator = fn length ->
  :crypto.strong_rand_bytes(length) |> Base.encode64() |> binary_part(0, length)
end

# For production, we often load configuration from external
# sources, such as your system environment. For this reason,
# you won't find the :http configuration below, but set inside
# VolunteerWeb.Endpoint.init/2 when load_from_system_env is
# true. Any dynamic configuration should be done there.
#
# Don't forget to configure the url host to something meaningful,
# Phoenix uses this information when generating URLs.
#
# Finally, we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the mix phx.digest task
# which you typically run after static files are built.
config :volunteer, VolunteerWeb.Endpoint,
  load_from_system_env: true,
  http: [port: "${PORT}"],
  check_origin: false,
  root: ".",
  url: [host: "ots.the.ismaili", port: 80],
  cache_static_manifest: "priv/static/cache_manifest.json",
  secret_key_base: secret_key_generator.(64),
  server: true,
  code_reloader: false

# General application configuration
config :volunteer,
  send_analytics: true,
  use_ssl: true,
  canny_private_key: "${CANNY_PRIVATE_KEY}"

# Configure database
config :volunteer, Volunteer.Repo,
  log: :warn,
  username: "${DB_USERNAME}",
  password: "${DB_PASSWORD}",
  database: "${DB_NAME}",
  socket: "${DB_HOST}",
  timeout: 7200_000,
  pool_size: 20

# Configure mailer
config :volunteer, VolunteerEmail.Mailer,
  api_key: "${MAILER_API_KEY}",
  adapter: VolunteerEmail.WrapperAdapter,
  wrapped_adapter: (
    case "${MAILER_ADAPTER}" do
      "send_grid" -> Bamboo.SendGridAdapter
      "local" -> Bamboo.LocalAdapter
    end
  )

# Configure sentry's error logging
config :sentry,
  environment_name: "${SENTRY_ENVIRONMENT_NAME}",
  dsn: "${SENTRY_DSN}"

# Configure Google's reCaptcha V2
config :recaptcha,
  public_key: "${RECAPTCHA_PUBLIC_KEY}",
  secret: "${RECAPTCHA_SECRET}"

# Configure Azure AD v2.0 OAuth2 Flow
config :ueberauth, Ueberauth.Strategy.Microsoft.OAuth,
  client_id: "${MICROSOFT_OAUTH_CLIENT_ID}",
  client_secret: "${MICROSOFT_OAUTH_CLIENT_SECRET}"

# Do not print debug messages in production
config :logger, level: :info

# Configure AppSignal
config :appsignal, :config, active: true

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :volunteer, VolunteerWeb.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [:inet6,
#               port: 443,
#               keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#               certfile: System.get_env("SOME_APP_SSL_CERT_PATH")]
#
# Where those two env variables return an absolute path to
# the key and cert in disk or a relative path inside priv,
# for example "priv/ssl/server.key".
#
# We also recommend setting `force_ssl`, ensuring no data is
# ever sent via http, always redirecting to https:
#
#     config :volunteer, VolunteerWeb.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# ## Using releases
#
# If you are doing OTP releases, you need to instruct Phoenix
# to start the server for all endpoints:

config :phoenix, :serve_endpoints, true

# Alternatively, you can configure exactly which server to
# start per endpoint:
#
#     config :volunteer, VolunteerWeb.Endpoint, server: true
#
